---
import type { CollectionEntry } from "astro:content";

import BaseLayout from "./Base.astro";
import BlogHero from "@/components/blog/Hero";
// import TOC from "@/components/blog/TOC";
import { ViewTransitions } from "astro:transitions";
import GoBack from "../components/GoBack.astro";
interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const {
	data: { title, description, ogImage, publishDate, updatedDate, additionalImage },
	slug,
} = post;
const socialImage = ogImage ?? `/og-image/${slug}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
// const { headings } = await post.render();
const getImagePath = (imageName: string) => {
	// Construct the path to the image in the same directory as the .md file
	return `content/post/${slug}/${imageName}`;
};
---

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>

<div id="gobacker" style={{ position: "fixed", top: "60px", right: "3vw", zIndex: "5" }}>
	<GoBack />
</div>

<BaseLayout meta={{ title, description, articleDate, ogImage: socialImage }}>
	<ViewTransitions />
	<div class="" transition:animate="slide">
		<article class="" data-pagefind-body>
			<div id="blog-hero"><BlogHero content={post} /></div>
			{/* Render dynamic elements */}

			<!-- {!!headings.length && <TOC headings={headings} />} -->
			<div class="" style={{ padding: "0 4%" }}>
				<!-- <img src={svgImage} /> -->

				{
					additionalImage && (
						<Fragment>
							<img src={getImagePath(additionalImage)} alt="Additional Image" />
						</Fragment>
					)
				}
				<slot />
			</div>
		</article>
	</div>
	<button
		id="to-top-btn"
		class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
		aria-label="Back to Top"
		data-show="false"
		><svg
			xmlns="http://www.w3.org/2000/svg"
			aria-hidden="true"
			focusable="false"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="2"
			stroke="currentColor"
			class="h-6 w-6"
		>
			<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
		</svg>
	</button>
</BaseLayout>
