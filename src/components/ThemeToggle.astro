<!-- theme-toggle.astro -->
<theme-toggle class="carto">
	<button
		type="button"
		id="toggle-theme"
		style={{
			display: "flex",
			flexDirection: "column",
			justifyContent: "center",
			alignItems: "center",
			marginTop: "0px",
			textAlign: "center",
		}}
		class=""
		aria-label="Toggle Dark Mode"
	>
		<svg
			id="sun-svg"
			class="transition-all"
			style={{ width: "30px", height: "30px" }}
			aria-hidden="true"
			focusable="false"
			stroke-width="1.5"
			viewBox="0 0 24 24"
			fill="none"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path
				d="M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18Z"
				stroke="#ccc"
				stroke-linecap="round"
				stroke-linejoin="round"></path>
			<path d="M22 12L23 12" stroke="#ccc" stroke-linecap="round" stroke-linejoin="round"></path>
			<path d="M12 2V1" stroke="#ccc" stroke-linecap="round" stroke-linejoin="round"></path>
			<path d="M12 23V22" stroke="#ccc" stroke-linecap="round" stroke-linejoin="round"></path>
			<path d="M20 20L19 19" stroke="#ccc" stroke-linecap="round" stroke-linejoin="round"></path>
			<path d="M20 4L19 5" stroke="#ccc" stroke-linecap="round" stroke-linejoin="round"></path>
			<path d="M4 20L5 19" stroke="#ccc" stroke-linecap="round" stroke-linejoin="round"></path>
			<path d="M4 4L5 5" stroke="#ccc" stroke-linecap="round" stroke-linejoin="round"></path>
			<path d="M1 12L2 12" stroke="#ccc" stroke-linecap="round" stroke-linejoin="round"></path>
		</svg>
		<span class="themetext" style={{ fontSize: "10px" }}> Theme</span>
	</button>
</theme-toggle>

<script>
	class ThemeToggle extends HTMLElement {
		constructor() {
			super();
			// Find the button element inside this custom element
			const button = this.querySelector("button");

			if (button) {
				// Add a click event listener to the button
				button.addEventListener("click", (e) => {
					if (e.currentTarget instanceof HTMLButtonElement) {
						// isPressed === dark mode currently on
						let isPressed = e.currentTarget.getAttribute("aria-pressed") === "true";

						// Create a custom event to notify the theme change
						let themeChangeEvent = new CustomEvent("theme-change", {
							detail: {
								theme: isPressed ? "light" : "dark",
							},
						});

						// Dispatch the theme change event to ThemeProvider.astro
						document.dispatchEvent(themeChangeEvent);

						// Toggle the aria-pressed attribute
						e.currentTarget.setAttribute("aria-pressed", String(!isPressed));
					}
				});
			}
		}
	}

	customElements.define("theme-toggle", ThemeToggle);
</script>
