---
import type { CollectionEntry } from "astro:content";
import type { HTMLTag, Polymorphic } from "astro/types";
// import FormattedDate from "../FormattedDate.astro";
import { Image } from "astro:assets";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	post: CollectionEntry<"post">;
	withDesc?: boolean;
};

const { post, withDesc = false } = Astro.props;
// const postDate = post.data.updatedDate ?? post.data.publishDate;
---

<!-- <FormattedDate date={postDate} class="min-w-[120px] text-gray-500" /> --><!-- <Tag> -->
<div class="post-card1">
	<a href={`/posts/${post.slug}/`} class="cactus-link" rel="prefetch">
		<!-- {post.data.tags} -->

		{/* Check if coverImage exists and is an object */}
		{
			post.data.coverImage && typeof post.data.coverImage === "object" ? (
				<Image
					src={post.data.coverImage.src}
					alt={post.data.coverImage.alt}
					class="object-cover"
					loading="eager"
					fetchpriority="high"
				/>
			) : null
		}

		{/* Check if coverImage exists and is a string */}
		{
			typeof post.data.coverImage === "string" ? (
				<img id="1" src={import.meta.env.BASE_URL + post.data.coverImage} alt="" />
			) : null
		}
		<div
			class="panel"
			style="display: flex; justify-content: space-between; align-items: center; margin: 10px auto; width: auto; max-width: 80vw; row-gap: 0.4vw; column-gap: 0.4vw; text-align: center; padding: 1vh 2vw; font-size: clamp(1rem, 1vw, 1rem); background: rgba(0, 0, 0, 0.7); border: 0px solid red; color: rgb(170, 170, 170);"
		>
			<h2 class="title" style={{ color: "#ddd" }}>{post.data.title}</h2>

			{
				withDesc && (
					<q
						class="line-clamp-1 block italic"
						style={{ maxWidth: "50%", fontSize: "clamp(.8rem, 1.2vw, 1.8rem)" }}
					>
						{post.data.description}
					</q>
				)
			}
		</div>
	</a>
</div>
<!-- </Tag> -->
